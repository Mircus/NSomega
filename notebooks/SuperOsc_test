{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ùí©_ùíÆœâ: Superoscillatory Layer Test\n",
    "This notebook demonstrates the use of a custom PyTorch layer with superoscillatory activations and the computation of the Superoscillatory Enhancement Index (SEI)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torchvision\n",
    "import torchvision.transforms as transforms\n",
    "from layers.superosc_layer import SuperOscLayer\n",
    "from metrics.metrics import measure_SEI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load MNIST dataset\n",
    "transform = transforms.Compose([transforms.ToTensor(), transforms.Lambda(lambda x: x.view(-1))])\n",
    "trainset = torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform)\n",
    "trainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define simple models\n",
    "class ClassicalNet(nn.Module):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.fc = nn.Linear(28*28, 28*28)\n",
    "        self.act = nn.ReLU()\n",
    "    def forward(self, x):\n",
    "        return self.act(self.fc(x))\n",
    "\n",
    "class SuperOscNet(nn.Module):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.fc = nn.Linear(28*28, 28*28)\n",
    "        self.sosc = SuperOscLayer(28*28)\n",
    "    def forward(self, x):\n",
    "        return self.sosc(self.fc(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compare outputs and compute SEI\n",
    "dataiter = iter(trainloader)\n",
    "images, labels = next(dataiter)\n",
    "\n",
    "classic_model = ClassicalNet()\n",
    "superosc_model = SuperOscNet()\n",
    "\n",
    "classic_out = classic_model(images)\n",
    "superosc_out = superosc_model(images)\n",
    "\n",
    "bandwidth_limit = 0.1\n",
    "sei_score = measure_SEI(superosc_out, classic_out, bandwidth_limit)\n",
    "print(f"SEI Score: {sei_score:.4f}")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": ""
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
